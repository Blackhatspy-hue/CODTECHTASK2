import re

class SolidityVulnerabilityScanner:
    def __init__(self, contract_code):
        self.contract_code = contract_code

    def check_reentrancy(self):
        reentrancy_patterns = [
            r'call\.value\(\d+\)\.gas\(\d+\)\(.*\)',  # Reentrancy vulnerable pattern
            r'call\.value\(\d+\)\(.*\)',               # Potential reentrancy
        ]
        for pattern in reentrancy_patterns:
            matches = re.findall(pattern, self.contract_code)
            if matches:
                print(f"Possible reentrancy vulnerability found: {len(matches)} occurrence(s).")
                return True
        return False

    def check_uninitialized_variables(self):
        uninitialized_patterns = [
            r'uint\s*\w+;',      # Uninitialized uint
            r'address\s*\w+;',   # Uninitialized address
            r'bool\s*\w+;',      # Uninitialized bool
            r'function\s*\w+;',  # Uninitialized function
        ]
        for pattern in uninitialized_patterns:
            matches = re.findall(pattern, self.contract_code)
            if matches:
                print(f"Uninitialized variables found: {len(matches)} occurrence(s).")
                return True
        return False

    def run_analysis(self):
        print("Starting vulnerability scan...")
        if not self.check_reentrancy():
            print("No reentrancy vulnerabilities detected.")
        if not self.check_uninitialized_variables():
            print("No uninitialized variables detected.")
        print("Vulnerability scan complete.")

# Sample Solidity code for demonstration
sample_code = """
pragma solidity ^0.4.17;

contract Example {
    uint public value;
    address public owner;

    function Example() public {
        owner = msg.sender;
    }

    function withdraw() public {
        owner.call.value(1000)(msg.sender); // Potential reentrancy
    }
}
"""

scanner = SolidityVulnerabilityScanner(sample_code)
scanner.run_analysis()
